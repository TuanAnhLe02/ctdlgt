#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Cấu trúc Event
typedef struct Event {
    int start_time;       // Thời gian bắt đầu
    char name[50];        // Tên sự kiện
    int priority;         // Độ ưu tiên
} Event;

// Cấu trúc nút của AVL Tree
typedef struct AVLNode {
    Event event;              // Sự kiện
    struct AVLNode* left;     // Con trái
    struct AVLNode* right;    // Con phải
    int height;               // Chiều cao của nút
} AVLNode;

// Tính chiều cao của một nút
int height(AVLNode* node) {
    return node ? node->height : 0;
}

// Tính giá trị lớn hơn
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Tạo một nút mới trong AVL Tree
AVLNode* create_node(Event event) {
    AVLNode* node = (AVLNode*)malloc(sizeof(AVLNode));
    node->event = event;
    node->left = node->right = NULL;
    node->height = 1;
    return node;
}

// Xoay phải để cân bằng
AVLNode* rotate_right(AVLNode* y) {
    AVLNode* x = y->left;
    AVLNode* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

// Xoay trái để cân bằng
AVLNode* rotate_left(AVLNode* x) {
    AVLNode* y = x->right;
    AVLNode* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

// Tính hệ số cân bằng
int get_balance(AVLNode* node) {
    return node ? height(node->left) - height(node->right) : 0;
}

// Thêm một Event vào AVL Tree
AVLNode* insert(AVLNode* node, Event event) {
    if (!node) {
        return create_node(event);
    }

    // Chèn theo thời gian bắt đầu
    if (event.start_time < node->event.start_time) {
        node->left = insert(node->left, event);
    } else if (event.start_time > node->event.start_time) {
        node->right = insert(node->right, event);
    } else {
        return node; // Không cho phép trùng thời gian bắt đầu
    }

    node->height = 1 + max(height(node->left), height(node->right));

    int balance = get_balance(node);

    // Left-Left
    if (balance > 1 && event.start_time < node->left->event.start_time) {
        return rotate_right(node);
    }

    // Right-Right
    if (balance < -1 && event.start_time > node->right->event.start_time) {
        return rotate_left(node);
    }

    // Left-Right
    if (balance > 1 && event.start_time > node->left->event.start_time) {
        node->left = rotate_left(node->left);
        return rotate_right(node);
    }

    // Right-Left
    if (balance < -1 && event.start_time < node->right->event.start_time) {
        node->right = rotate_right(node->right);
        return rotate_left(node);
    }

    return node;
}

// Tìm kiếm sự kiện theo tên
AVLNode* search_event(AVLNode* node, const char* name) {
    if (!node) {
        return NULL; // Không tìm thấy
    }

    if (strcmp(name, node->event.name) == 0) {
        return node; // Tìm thấy
    }

    // Duyệt tiếp theo thứ tự tăng dần thời gian
    AVLNode* left_result = search_event(node->left, name);
    if (left_result) {
        return left_result;
    }

    return search_event(node->right, name);
}

// In các sự kiện trong AVL Tree theo thứ tự tăng dần
void inorder_traversal(AVLNode* root) {
    if (root) {
        inorder_traversal(root->left);
        printf("Event: %s, Start Time: %d, Priority: %d\n",
               root->event.name, root->event.start_time, root->event.priority);
        inorder_traversal(root->right);
    }
}

// Hàm chính
int main() {
    // Người 1: Tạo và kiểm tra sự kiện
    Event event1 = {10, "Meeting A", 3};
    Event event2 = {5, "Workshop B", 2};
    Event event3 = {20, "Call C", 4};
    Event event4 = {15, "Meeting D", 5};

    // Người 3: Quản lý các sự kiện bằng AVL Tree
    AVLNode* root = NULL;
    root = insert(root, event1);
    root = insert(root, event2);
    root = insert(root, event3);
    root = insert(root, event4);

    printf("Events in AVL Tree (sorted by start time):\n");
    inorder_traversal(root);

    // Tìm kiếm sự kiện
    const char* search_name = "Meeting D";
    AVLNode* found_event = search_event(root, search_name);
    if (found_event) {
        printf("\nFound Event: %s, Start Time: %d, Priority: %d\n",
               found_event->event.name, found_event->event.start_time, found_event->event.priority);
    } else {
        printf("\nEvent '%s' not found!\n", search_name);
    }

    // Thêm một sự kiện mới
    Event event5 = {25, "Seminar E", 1};
    root = insert(root, event5);

    printf("\nEvents in AVL Tree after adding new event:\n");
    inorder_traversal(root);

    return 0;
}
